using DyadControlSystems
using DyadControlSystems.MPC
using DyadControlSystems.Symbolics
using StaticArrays
using LinearAlgebra
using Test
# using Optimization

"""
    dx = cartpole(x, u)
Continuous-time dynamics for the cart-pole system with state `x` and control input `u`.
"""
function cartpole(x, u, p, _=0)
    T = promote_type(eltype(x), eltype(u))
    mc, mp, l, g = 1.0, 0.2, 0.5, 9.81

    q  = x[SA[1, 2]]
    qd = x[SA[3, 4]]

    s = sin(q[2])
    c = cos(q[2])

    H = @SMatrix [mc+mp mp*l*c; mp*l*c mp*l^2]
    C = @SMatrix [0 -mp*qd[2]*l*s; 0 0]
    G = @SVector [0, mp * g * l * s]
    B = @SVector [1, 0]
    if T <: Symbolics.Num
        qdd = Matrix(-H) \ Vector(C * qd + G - B * u[1])
        return [qd; qdd]
    else
        qdd = -H \ (C * qd + G - B * u[1])
        return [qd; qdd]::SVector{4, T}
    end
end

p = nothing

##
nu = 1 # number of controls
nx = 4 # number of states
Ts = 0.1 # sample time
N = 5
x0 = ones(nx) # Initial state
r = zeros(nx)
Q1 = Diagonal(@SVector ones(nx)) # state cost matrix
Q2 = 0.1Diagonal(@SVector ones(nu)) # control cost matrix
Q3 = 1Q2
t = 0
e = zeros(nx)


discrete_dynamics = MPC.rk4(cartpole, Ts)
measurement = (x,u,p,t) -> x

dynamics = FunctionSystem(cartpole, measurement, Ts; x=:x^nx, u=:u^nu, y=:y^nx)
@test dynamics.na == 0 # No algebraic vars

n_colloc = 5

u = zeros(nu,N)

#x, u = MPC.rollout(discrete_dynamics, x0, u, p, t)
#xn = reshape(repeat(x, n_colloc,1), nx, :)#ones(1,n_colloc*(N+1)*nx)#reshape(repeat(x, n_colloc,1), nx, :)

xn = zeros(nx,n_colloc*N + 1)
xn = [1.0, 1.0, 1.0, 1.0, 1.0069636097703414, 1.0065226717760503, 1.0058596617675013, 0.8788259680289134, 1.033449067157329, 1.0234799054606596, 1.0267104483973903, 0.4222949893060547, 1.0687964368822498, 1.0276793581367134, 1.0525796357357238, -0.17538032193137687, 1.096485124270045, 1.0171447856500349, 1.0727570610954713, -0.6329326815014014, 1.103952792607638, 1.0123279687549125, 1.0783435339806549, -0.7545371676055197, 1.1114598045060262, 1.006667200711841, 1.0840559548895439, -0.8759486072355519, 1.1400000065964409, 0.9779276069545221, 1.1069149689200561, -1.3292361805947412, 1.178200218728611, 0.9227897839680014, 1.1412191287236322, -1.912370168418758, 1.2083262359226412, 0.8672392409335236, 1.1716938125926186, -2.349607277643447, 1.2164919548724356, 0.8505268128900314, 1.1804726686954479, -2.4642223921728728, 1.2247197766426565, 0.8330211846129963, 1.1895264000228596, -2.5778928582705514, 1.2561807451308789, 0.7603847180213017, 1.2258306869676396, -2.9944324853485123, 1.2987275035889592, 0.6497579939672025, 1.2776655661239806, -3.5061193014439245, 1.3325569285835872, 0.5536623615564977, 1.318894292750299, -3.8636395829398573, 1.3417524170371569, 0.5265257318162865, 1.329779294082853, -3.952364501854924, 1.3510224896877803, 0.49878577773742305, 1.3405100642190155, -4.0378677095486575, 1.3864588439068246, 0.38968767041961677, 1.378539269888522, -4.32640085590728, 1.4340413658264013, 0.23747798913551318, 1.4182118906931829, -4.607687776969015, 1.471266920393825, 0.11557721108358421, 1.4369337127337827, -4.734393877678506, 1.481254166719129, 0.08263591626763779, 1.4398038958712611, -4.75356555191564, 1.4912577548268986, 0.04958466740278647, 1.4417462596240724, -4.766453564212059, 1.528839166311707, -0.07470008950276502, 1.4403451143864479, -4.757198363680913, 1.577500805563851, -0.23437540565130707, 1.4188675296768578, -4.6120961532912865, 1.6141166093469206, -0.3520702943576205, 1.3898768858652948, -4.408735066986531, 1.6237349418846005, -0.38245277593916993, 1.3807837876671158, -4.3428661591347515]
xn = reshape(xn,nx,:)
oi = ObjectiveInput(xn, u, r)

cfe = CollocationFinE(dynamics, false; n_colloc = 5, N, Ts)
@test cfe isa CollocationFinE{false} # DAE system not detected
c = randn(length(cfe))
MPC.evaluate!(c, cfe, oi, 0, 0)
@test c ≈ 0*c atol=1e-6

@test @allocated(MPC.evaluate!(c, cfe, oi, 0, 0)) == 0
# @btime MPC.evaluate!($c, $cfe, $oi, 0, 0)

# 1.245 μs (0 allocations: 0 bytes)
# 888.060 ns (0 allocations: 0 bytes) less views for c
# 809.326 ns (0 allocations: 0 bytes) with Der_A a static array

"""
Testing DAE solving with Collocation  
    dx = pend(x,u)
Continuous-time dynamics for the pendulum DAE system with state `x` and control input `u`.  

"""

function pend(x, u, p=0, t=0)
    x,y,ux,v,λ = x
    g = 9.82
    y = SA[
        ux
        v
        -λ*x + u[1]
        -λ*y - g + u[2]
        ux^2 + v^2 − λ*(x^2 + y^2) − g*y + x*u[1] + y*u[2]
    ]
    return y
end

##
nu = 2 # number of controls
ns = 4 # number of ODE states
na = 1 # number of DAE states
nx = ns+na
Ts = 0.1 # sample time
N = 5
# Mass matrix for DAE 
M = Matrix(1.0I(5))
M[5,5] = 0
x0 = [ones(ns);-3.91] # Initial state


measurement = (x,u,p,t) -> x
using OrdinaryDiffEq
pend_f   = ODEFunction(pend, mass_matrix=M)
dynamics = FunctionSystem(pend_f, measurement, Ts; x=:x^nx, u=:u^nu, y=:y^nx)
@test dynamics.na == 1 # One algebraic var
discrete_dynamics_pend    = MPC.MPCIntegrator(pend_f, ODEProblem, Rodas4(); p, Ts, nx, nu, dt=Ts, adaptive=false)

u = zeros(nu,N)
r = zeros(nx)
x, u = MPC.rollout(discrete_dynamics_pend, x0, u, p, t)
#oi = ObjectiveInput(x, u, r)
n_colloc = 5
xn = zeros(nx,n_colloc*N + 1)
xn = [1.0 1.0 1.0 1.0 -3.91 1.0070375676386774 1.006800825882148 1.027217314971256 0.9590325901546284 -3.901751766001922 1.0351448391636762 1.0297957093509513 1.1302780215685917 0.8059820989428642 -3.839325891689012 1.0758721376918743 1.0538003047773938 1.265587389536805 0.6057992091822549 -3.6947221669934263 1.1101965196740986 1.0675631878869984 1.3687162449886243 0.4500481296398892 -3.544155492878276 1.11979445585073 1.0705420947694793 1.395980231329904 0.4080073811330184 -3.4989552255072076 1.1295813252543416 1.0732281840859492 1.4231200084353142 0.36569174523964093 -3.4517645485772905 1.1679787042366399 1.0806616415199497 1.5235744922502203 0.2040387105425224 -3.2579675316191516 1.221945517499386 1.0839028159754025 1.650111644127329 -0.01508059741115056 -2.968831028525883 1.2661559290697482 1.0812383917156123 1.7423672989176038 -0.19062322355641184 -2.7218475190131106 1.2783361625495735 1.0797484223419367 1.766105005579989 -0.23864438248849806 -2.652518384030454 1.2906798705848976 1.0779231007465615 1.7894465320427444 -0.2872214235545983 -2.5817455944309136 1.3384131606107161 1.0680140413584074 1.8731323885105347 -0.47473631687271395 -2.303509434190124 1.4038052508026335 1.0475337940305123 1.9714020867284558 -0.7326394546396011 -1.9112132663393222 1.4560461055615508 1.0257470328660028 2.036619205109181 -0.9411789111384474 -1.5885369984373952 1.4702416643101643 1.0190139589578542 2.052304396738841 -0.9983998972623161 -1.4993629328757632 1.484543472901813 1.0118810988796307 2.0672204895998947 -1.056328812496967 -1.408848059451049 1.5390698751784717 0.9814620565340139 2.11581193270963 -1.280112411835036 -1.0572045031062016 1.6118132783372763 0.9327669241361788 2.159431019550099 -1.5873206908472661 -0.5700819116265136 1.6683262713904299 0.8882087135868628 2.17537193413075 -1.8342869729094122 -0.17506103893865974 1.683435929695893 0.8752390933982961 2.176778291307217 -1.901728109636849 -0.06664287907825203 1.6985509313631184 0.8617988407356966 2.176916245227728 -1.969838133139852 0.04310137780822831 1.7551694869580117 0.8070837271493023 2.1654639583644686 -2.23118704180416 0.4667378536954671 1.8281134521860358 0.7252566317079202 2.1193919999781285 -2.584589332992062 1.047029100249692 1.8825869380031042 0.6542887939386337 2.0575362790603293 -2.863398862866108 1.5123486191784101 1.8968020736756503 0.6341465865741388 2.036860453948494 -2.938628342864345 1.0]
xn = reshape(xn,nx,:)
oi = ObjectiveInput(xn, u, r)

cfe = CollocationFinE(dynamics, false; n_colloc = 5, N, Ts, hold_order = 1)
@test cfe isa CollocationFinE{true} # DAE system detected

c = randn(length(cfe))

MPC.evaluate!(c, cfe, oi, 0, 0)
@test c ≈ 0*c atol=1e-6
@test @allocated(MPC.evaluate!(c, cfe, oi, 0, 0)) == 0
# @btime MPC.evaluateDAE!($c, $cfe, $oi, 0, 0)
# 1.146 μs (0 allocations: 0 bytes) (Rajeev)
# 1.041 μs (0 allocations: 0 bytes) (Fredrik)


# These should look similar and they do at the time of writing
# timevec = vec((1:N)' .+ [0,0.06943184420297369,0.3300094782075724,0.6699905217924279,0.9305681557970239])
# plot(x', layout=5)
# plot!(timevec, xn[:, 1:end-1]', layout=5)